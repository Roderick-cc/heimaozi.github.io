<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dobin</title>
  <icon>https://www.gravatar.com/avatar/e68e0574df1b17f4ade7922f9f8b4ac3</icon>
  <subtitle>Torch down,the flame is still upward.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-12T09:24:09.335Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dobin</name>
    <email>1002133015@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mobile</title>
    <link href="http://yoursite.com/2018/06/04/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%92%E5%88%86%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
    <id>http://yoursite.com/2018/06/04/移动端设备的划分 - 副本 (2)/</id>
    <published>2018-06-04T07:31:01.000Z</published>
    <updated>2018-06-12T09:24:09.335Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 1.移动端.</p><p>$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp</p><ul><li><p>超小屏幕（手机） 768px  以下</p><a id="more"></a></li><li><p>小屏 （pad）         768px-992px</p></li><li><p>中屏    （标屏）      992px-1200px</p></li><li><p>大屏（电脑）            1200px以上 </p></li><li><p>@media screen  and（min-width）{}</p><p>​</p><p>2.前端开发资源库 awesomes </p></li></ul><p>3.国内首个开源H5跨屏前端框架 Amaze UI</p><p>4.事件绑定： 主角  addEventListener(‘’,function(){})</p><p>主角,ontouch(function(){})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--文档编码申明--&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;!--要求当前网页使用浏览器最高版本的内核来渲染--&gt;</span><br><span class="line">&lt;!-- more --&gt;   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">   &lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;</span><br><span class="line">   &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link href=&quot;../lib/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/html5shiv/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/respond/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">html5shiv 和  respond 分别用来解决IE8版本浏览器不支持 H5标签和媒体查询的  不兼容问题</span><br></pre></td></tr></table></figure><h3 id="2-栅格布局"><a href="#2-栅格布局" class="headerlink" title="2.栅格布局"></a>2.栅格布局</h3><p>​    1.栅格系统：其实就是行和列的布局，网格状布局</p><p>​    2.容器：container——默认会有15px左右的外边距 .row 填充父容器的15px的左右内间距   margin-left,margin-right -15px拉伸 可回充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--列：col-*-*  *不确定（参数） --&gt;</span><br><span class="line">            col：列样式</span><br><span class="line">            第一个*：屏幕的大小</span><br><span class="line">            大屏设备     lg   大屏设备以上生效包含本身</span><br><span class="line">            中屏设备     md   中屏设备以上生效包含本身</span><br><span class="line">            小屏设备     sm   小屏设备以上生效包含本身</span><br><span class="line">            超小屏设备   xs   超小屏设备以上生效包含本身</span><br><span class="line">            第二个*：每一行的分等份，默认分成12等份 ，数字代表的是占多少份</span><br><span class="line">eg:  &lt;div class=&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    3.显示与隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visible-lg     大屏显示其他隐藏</span><br><span class="line">visible-md</span><br><span class="line">visible-sm</span><br><span class="line">visible-xs</span><br><span class="line">3.2版本以后  建议使用hidden</span><br><span class="line">hidden-lg</span><br><span class="line">hidden-md</span><br><span class="line">hidden-sm</span><br><span class="line">hidden-xs</span><br></pre></td></tr></table></figure><h3 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3.选择器"></a>3.选择器</h3><ul><li>+.-选择器   </li><li>+紧邻的下一个兄弟元素 ~后面所有的兄弟元素</li></ul><h3 id="4-git搭建"><a href="#4-git搭建" class="headerlink" title="4.git搭建"></a>4.git搭建</h3><p>​    1.查看生成密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;       ----用户名</span><br><span class="line">$ git config --global user.email &quot;xxx@xxx.com&quot;  ---邮箱</span><br><span class="line">1.查看是否已经有了ssh密钥：cd ~/.ssh</span><br><span class="line">2.生成密钥 $ ssh-keygen -t rsa -C “xxx@xxx.com”    id_rsa.pub”-公钥</span><br><span class="line"></span><br><span class="line">$ git init 初始化仓库，会在当前目录下创建一个,git隐藏的文件仓库</span><br><span class="line"></span><br><span class="line">$ mkdir css 创建了为css 的文件夹</span><br><span class="line">$ cd CSS 进入CSS文件夹内</span><br><span class="line">$ cd ../ 返回上一级目录</span><br><span class="line">$ touch index.html 创建文本</span><br><span class="line">$ rm 移除文件夹</span><br><span class="line"></span><br><span class="line">$ git add 表示当前文件夹(.)中所有文件加入到管理的缓存中（不是一次性加入到仓库中而是先加入到缓存区）</span><br><span class="line">$ git status   查看状态</span><br><span class="line">$ git commit -m &apos;注释&apos;  提交并增加注释</span><br><span class="line">$</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="5-boorstrap导航"><a href="#5-boorstrap导航" class="headerlink" title="5.boorstrap导航"></a>5.boorstrap导航</h3><h2 id="6-对象创建方式、for-in-循环遍历"><a href="#6-对象创建方式、for-in-循环遍历" class="headerlink" title="6.对象创建方式、for in 循环遍历"></a>6.对象创建方式、for in 循环遍历</h2><p>​     1.对象字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o =&#123;</span><br><span class="line">  name:&apos;s&apos;,</span><br><span class="line">  sex:true,</span><br><span class="line">  say:function()&#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.new Object()创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person=new Object()</span><br><span class="line">person.name =&apos;s&apos;;</span><br><span class="line">person.age=30;</span><br><span class="line">person.sayHi=function()&#123;console(&apos;dasd&apos;)&#125;</span><br></pre></td></tr></table></figure><p>​    3.工厂函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">  var person = new Object();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = function()&#123;</span><br><span class="line">    console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  return person;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = createPerson(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    4.自定义构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.sayHi = function()&#123;</span><br><span class="line">  console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    遍历对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;&#125;</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">  obj[i]=i*2; </span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">  console.log(key+&apos;==&apos;+obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组、字符串的常用方法"><a href="#7-数组、字符串的常用方法" class="headerlink" title="7.数组、字符串的常用方法"></a>7.数组、字符串的常用方法</h2><p>​    前言：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//1 栈（stack）操作 先进后出</span><br><span class="line">1.push（） //添加元素到数组的末尾</span><br><span class="line">2.pop（）//删除数组末尾的元素</span><br><span class="line"></span><br><span class="line">3.shift() //删除数组最前面（头部）的元素</span><br><span class="line">4.unshift() //添加元素到数组的头部</span><br><span class="line"></span><br><span class="line">5.indexOf(&apos;&apos;)  //找出某个元素在数组中的索引从0开始</span><br><span class="line">6.splice(pos元素, 1索引) //过索引删除某个元素</span><br><span class="line">7.slice()复制一个数组</span><br><span class="line"></span><br><span class="line">// 3 排序方法</span><br><span class="line">reverse（） //翻转数组</span><br><span class="line">sort（）； //即使是数组sort也是根据字符，从小到大排序</span><br><span class="line">// 4 操作方法</span><br><span class="line">concat（） //把参数拼接到当前数组</span><br><span class="line">// 5 位置方法</span><br><span class="line">indexOf()、lastIndexOf()   //如果没找到返回-1</span><br><span class="line">// 6 迭代方法 不会修改原数组(可选)</span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line">// 7 方法将数组的所有元素连接到一个字符串中。</span><br><span class="line">join()</span><br></pre></td></tr></table></figure><p>​    字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">charAt()    //获取指定位置处字符</span><br><span class="line">charCodeAt()  //获取指定位置处字符的ASCII码</span><br><span class="line">concat()   //拼接字符串，等效于+，+更常用</span><br><span class="line">slice()    //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substring() //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substr()   //从start位置开始，截取length个字符</span><br><span class="line">// 3 位置方法</span><br><span class="line">indexOf()   //返回指定内容在元字符串中的位置</span><br><span class="line">lastIndexOf() //从后往前找，只找第一个匹配的</span><br><span class="line">// 4 去除空白   </span><br><span class="line">trim()  //只能去除字符串前后的空白</span><br><span class="line">// 5 大小写转换方法</span><br><span class="line">to(Locale)UpperCase() //转换大写</span><br><span class="line">to(Locale)LowerCase() //转换小写</span><br></pre></td></tr></table></figure><p> innerHTML和innerText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line">box.innerHTML = &apos;我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;&apos;;</span><br><span class="line">box.innerText = &apos;我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;&apos;;</span><br></pre></td></tr></table></figure><h2 id="8-Dom自定义属性操作-getAttribute-…"><a href="#8-Dom自定义属性操作-getAttribute-…" class="headerlink" title="8.Dom自定义属性操作-getAttribute()…"></a>8.Dom自定义属性操作-getAttribute()…</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><p>## </p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿### 1.移动端.&lt;/p&gt;
&lt;p&gt;$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超小屏幕（手机） 768px  以下&lt;/p&gt;
    
    </summary>
    
    
      <category term="case" scheme="http://yoursite.com/tags/case/"/>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
      <category term="Dom" scheme="http://yoursite.com/tags/Dom/"/>
    
  </entry>
  
  <entry>
    <title>mobile</title>
    <link href="http://yoursite.com/2018/06/04/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%92%E5%88%86%20-%20%E5%89%AF%E6%9C%AC%20(4)/"/>
    <id>http://yoursite.com/2018/06/04/移动端设备的划分 - 副本 (4)/</id>
    <published>2018-06-04T07:31:01.000Z</published>
    <updated>2018-06-12T09:24:09.335Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 1.移动端.</p><p>$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp</p><ul><li><p>超小屏幕（手机） 768px  以下</p><a id="more"></a></li><li><p>小屏 （pad）         768px-992px</p></li><li><p>中屏    （标屏）      992px-1200px</p></li><li><p>大屏（电脑）            1200px以上 </p></li><li><p>@media screen  and（min-width）{}</p><p>​</p><p>2.前端开发资源库 awesomes </p></li></ul><p>3.国内首个开源H5跨屏前端框架 Amaze UI</p><p>4.事件绑定： 主角  addEventListener(‘’,function(){})</p><p>主角,ontouch(function(){})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--文档编码申明--&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;!--要求当前网页使用浏览器最高版本的内核来渲染--&gt;</span><br><span class="line">&lt;!-- more --&gt;   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">   &lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;</span><br><span class="line">   &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link href=&quot;../lib/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/html5shiv/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/respond/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">html5shiv 和  respond 分别用来解决IE8版本浏览器不支持 H5标签和媒体查询的  不兼容问题</span><br></pre></td></tr></table></figure><h3 id="2-栅格布局"><a href="#2-栅格布局" class="headerlink" title="2.栅格布局"></a>2.栅格布局</h3><p>​    1.栅格系统：其实就是行和列的布局，网格状布局</p><p>​    2.容器：container——默认会有15px左右的外边距 .row 填充父容器的15px的左右内间距   margin-left,margin-right -15px拉伸 可回充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--列：col-*-*  *不确定（参数） --&gt;</span><br><span class="line">            col：列样式</span><br><span class="line">            第一个*：屏幕的大小</span><br><span class="line">            大屏设备     lg   大屏设备以上生效包含本身</span><br><span class="line">            中屏设备     md   中屏设备以上生效包含本身</span><br><span class="line">            小屏设备     sm   小屏设备以上生效包含本身</span><br><span class="line">            超小屏设备   xs   超小屏设备以上生效包含本身</span><br><span class="line">            第二个*：每一行的分等份，默认分成12等份 ，数字代表的是占多少份</span><br><span class="line">eg:  &lt;div class=&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    3.显示与隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visible-lg     大屏显示其他隐藏</span><br><span class="line">visible-md</span><br><span class="line">visible-sm</span><br><span class="line">visible-xs</span><br><span class="line">3.2版本以后  建议使用hidden</span><br><span class="line">hidden-lg</span><br><span class="line">hidden-md</span><br><span class="line">hidden-sm</span><br><span class="line">hidden-xs</span><br></pre></td></tr></table></figure><h3 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3.选择器"></a>3.选择器</h3><ul><li>+.-选择器   </li><li>+紧邻的下一个兄弟元素 ~后面所有的兄弟元素</li></ul><h3 id="4-git搭建"><a href="#4-git搭建" class="headerlink" title="4.git搭建"></a>4.git搭建</h3><p>​    1.查看生成密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;       ----用户名</span><br><span class="line">$ git config --global user.email &quot;xxx@xxx.com&quot;  ---邮箱</span><br><span class="line">1.查看是否已经有了ssh密钥：cd ~/.ssh</span><br><span class="line">2.生成密钥 $ ssh-keygen -t rsa -C “xxx@xxx.com”    id_rsa.pub”-公钥</span><br><span class="line"></span><br><span class="line">$ git init 初始化仓库，会在当前目录下创建一个,git隐藏的文件仓库</span><br><span class="line"></span><br><span class="line">$ mkdir css 创建了为css 的文件夹</span><br><span class="line">$ cd CSS 进入CSS文件夹内</span><br><span class="line">$ cd ../ 返回上一级目录</span><br><span class="line">$ touch index.html 创建文本</span><br><span class="line">$ rm 移除文件夹</span><br><span class="line"></span><br><span class="line">$ git add 表示当前文件夹(.)中所有文件加入到管理的缓存中（不是一次性加入到仓库中而是先加入到缓存区）</span><br><span class="line">$ git status   查看状态</span><br><span class="line">$ git commit -m &apos;注释&apos;  提交并增加注释</span><br><span class="line">$</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="5-boorstrap导航"><a href="#5-boorstrap导航" class="headerlink" title="5.boorstrap导航"></a>5.boorstrap导航</h3><h2 id="6-对象创建方式、for-in-循环遍历"><a href="#6-对象创建方式、for-in-循环遍历" class="headerlink" title="6.对象创建方式、for in 循环遍历"></a>6.对象创建方式、for in 循环遍历</h2><p>​     1.对象字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o =&#123;</span><br><span class="line">  name:&apos;s&apos;,</span><br><span class="line">  sex:true,</span><br><span class="line">  say:function()&#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.new Object()创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person=new Object()</span><br><span class="line">person.name =&apos;s&apos;;</span><br><span class="line">person.age=30;</span><br><span class="line">person.sayHi=function()&#123;console(&apos;dasd&apos;)&#125;</span><br></pre></td></tr></table></figure><p>​    3.工厂函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">  var person = new Object();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = function()&#123;</span><br><span class="line">    console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  return person;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = createPerson(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    4.自定义构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.sayHi = function()&#123;</span><br><span class="line">  console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    遍历对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;&#125;</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">  obj[i]=i*2; </span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">  console.log(key+&apos;==&apos;+obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组、字符串的常用方法"><a href="#7-数组、字符串的常用方法" class="headerlink" title="7.数组、字符串的常用方法"></a>7.数组、字符串的常用方法</h2><p>​    前言：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//1 栈（stack）操作 先进后出</span><br><span class="line">1.push（） //添加元素到数组的末尾</span><br><span class="line">2.pop（）//删除数组末尾的元素</span><br><span class="line"></span><br><span class="line">3.shift() //删除数组最前面（头部）的元素</span><br><span class="line">4.unshift() //添加元素到数组的头部</span><br><span class="line"></span><br><span class="line">5.indexOf(&apos;&apos;)  //找出某个元素在数组中的索引从0开始</span><br><span class="line">6.splice(pos元素, 1索引) //过索引删除某个元素</span><br><span class="line">7.slice()复制一个数组</span><br><span class="line"></span><br><span class="line">// 3 排序方法</span><br><span class="line">reverse（） //翻转数组</span><br><span class="line">sort（）； //即使是数组sort也是根据字符，从小到大排序</span><br><span class="line">// 4 操作方法</span><br><span class="line">concat（） //把参数拼接到当前数组</span><br><span class="line">// 5 位置方法</span><br><span class="line">indexOf()、lastIndexOf()   //如果没找到返回-1</span><br><span class="line">// 6 迭代方法 不会修改原数组(可选)</span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line">// 7 方法将数组的所有元素连接到一个字符串中。</span><br><span class="line">join()</span><br></pre></td></tr></table></figure><p>​    字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">charAt()    //获取指定位置处字符</span><br><span class="line">charCodeAt()  //获取指定位置处字符的ASCII码</span><br><span class="line">concat()   //拼接字符串，等效于+，+更常用</span><br><span class="line">slice()    //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substring() //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substr()   //从start位置开始，截取length个字符</span><br><span class="line">// 3 位置方法</span><br><span class="line">indexOf()   //返回指定内容在元字符串中的位置</span><br><span class="line">lastIndexOf() //从后往前找，只找第一个匹配的</span><br><span class="line">// 4 去除空白   </span><br><span class="line">trim()  //只能去除字符串前后的空白</span><br><span class="line">// 5 大小写转换方法</span><br><span class="line">to(Locale)UpperCase() //转换大写</span><br><span class="line">to(Locale)LowerCase() //转换小写</span><br></pre></td></tr></table></figure><p> innerHTML和innerText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line">box.innerHTML = &apos;我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;&apos;;</span><br><span class="line">box.innerText = &apos;我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;&apos;;</span><br></pre></td></tr></table></figure><h2 id="8-Dom自定义属性操作-getAttribute-…"><a href="#8-Dom自定义属性操作-getAttribute-…" class="headerlink" title="8.Dom自定义属性操作-getAttribute()…"></a>8.Dom自定义属性操作-getAttribute()…</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><p>## </p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿### 1.移动端.&lt;/p&gt;
&lt;p&gt;$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超小屏幕（手机） 768px  以下&lt;/p&gt;
    
    </summary>
    
    
      <category term="case" scheme="http://yoursite.com/tags/case/"/>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
      <category term="Dom" scheme="http://yoursite.com/tags/Dom/"/>
    
  </entry>
  
  <entry>
    <title>mobile</title>
    <link href="http://yoursite.com/2018/06/04/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%92%E5%88%86%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/06/04/移动端设备的划分 - 副本/</id>
    <published>2018-06-04T07:31:01.000Z</published>
    <updated>2018-06-12T09:24:09.335Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 1.移动端.</p><p>$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp</p><ul><li><p>超小屏幕（手机） 768px  以下</p><a id="more"></a></li><li><p>小屏 （pad）         768px-992px</p></li><li><p>中屏    （标屏）      992px-1200px</p></li><li><p>大屏（电脑）            1200px以上 </p></li><li><p>@media screen  and（min-width）{}</p><p>​</p><p>2.前端开发资源库 awesomes </p></li></ul><p>3.国内首个开源H5跨屏前端框架 Amaze UI</p><p>4.事件绑定： 主角  addEventListener(‘’,function(){})</p><p>主角,ontouch(function(){})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--文档编码申明--&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;!--要求当前网页使用浏览器最高版本的内核来渲染--&gt;</span><br><span class="line">&lt;!-- more --&gt;   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">   &lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;</span><br><span class="line">   &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link href=&quot;../lib/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/html5shiv/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/respond/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">html5shiv 和  respond 分别用来解决IE8版本浏览器不支持 H5标签和媒体查询的  不兼容问题</span><br></pre></td></tr></table></figure><h3 id="2-栅格布局"><a href="#2-栅格布局" class="headerlink" title="2.栅格布局"></a>2.栅格布局</h3><p>​    1.栅格系统：其实就是行和列的布局，网格状布局</p><p>​    2.容器：container——默认会有15px左右的外边距 .row 填充父容器的15px的左右内间距   margin-left,margin-right -15px拉伸 可回充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--列：col-*-*  *不确定（参数） --&gt;</span><br><span class="line">            col：列样式</span><br><span class="line">            第一个*：屏幕的大小</span><br><span class="line">            大屏设备     lg   大屏设备以上生效包含本身</span><br><span class="line">            中屏设备     md   中屏设备以上生效包含本身</span><br><span class="line">            小屏设备     sm   小屏设备以上生效包含本身</span><br><span class="line">            超小屏设备   xs   超小屏设备以上生效包含本身</span><br><span class="line">            第二个*：每一行的分等份，默认分成12等份 ，数字代表的是占多少份</span><br><span class="line">eg:  &lt;div class=&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    3.显示与隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visible-lg     大屏显示其他隐藏</span><br><span class="line">visible-md</span><br><span class="line">visible-sm</span><br><span class="line">visible-xs</span><br><span class="line">3.2版本以后  建议使用hidden</span><br><span class="line">hidden-lg</span><br><span class="line">hidden-md</span><br><span class="line">hidden-sm</span><br><span class="line">hidden-xs</span><br></pre></td></tr></table></figure><h3 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3.选择器"></a>3.选择器</h3><ul><li>+.-选择器   </li><li>+紧邻的下一个兄弟元素 ~后面所有的兄弟元素</li></ul><h3 id="4-git搭建"><a href="#4-git搭建" class="headerlink" title="4.git搭建"></a>4.git搭建</h3><p>​    1.查看生成密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;       ----用户名</span><br><span class="line">$ git config --global user.email &quot;xxx@xxx.com&quot;  ---邮箱</span><br><span class="line">1.查看是否已经有了ssh密钥：cd ~/.ssh</span><br><span class="line">2.生成密钥 $ ssh-keygen -t rsa -C “xxx@xxx.com”    id_rsa.pub”-公钥</span><br><span class="line"></span><br><span class="line">$ git init 初始化仓库，会在当前目录下创建一个,git隐藏的文件仓库</span><br><span class="line"></span><br><span class="line">$ mkdir css 创建了为css 的文件夹</span><br><span class="line">$ cd CSS 进入CSS文件夹内</span><br><span class="line">$ cd ../ 返回上一级目录</span><br><span class="line">$ touch index.html 创建文本</span><br><span class="line">$ rm 移除文件夹</span><br><span class="line"></span><br><span class="line">$ git add 表示当前文件夹(.)中所有文件加入到管理的缓存中（不是一次性加入到仓库中而是先加入到缓存区）</span><br><span class="line">$ git status   查看状态</span><br><span class="line">$ git commit -m &apos;注释&apos;  提交并增加注释</span><br><span class="line">$</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="5-boorstrap导航"><a href="#5-boorstrap导航" class="headerlink" title="5.boorstrap导航"></a>5.boorstrap导航</h3><h2 id="6-对象创建方式、for-in-循环遍历"><a href="#6-对象创建方式、for-in-循环遍历" class="headerlink" title="6.对象创建方式、for in 循环遍历"></a>6.对象创建方式、for in 循环遍历</h2><p>​     1.对象字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o =&#123;</span><br><span class="line">  name:&apos;s&apos;,</span><br><span class="line">  sex:true,</span><br><span class="line">  say:function()&#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.new Object()创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person=new Object()</span><br><span class="line">person.name =&apos;s&apos;;</span><br><span class="line">person.age=30;</span><br><span class="line">person.sayHi=function()&#123;console(&apos;dasd&apos;)&#125;</span><br></pre></td></tr></table></figure><p>​    3.工厂函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">  var person = new Object();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = function()&#123;</span><br><span class="line">    console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  return person;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = createPerson(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    4.自定义构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.sayHi = function()&#123;</span><br><span class="line">  console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    遍历对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;&#125;</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">  obj[i]=i*2; </span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">  console.log(key+&apos;==&apos;+obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组、字符串的常用方法"><a href="#7-数组、字符串的常用方法" class="headerlink" title="7.数组、字符串的常用方法"></a>7.数组、字符串的常用方法</h2><p>​    前言：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//1 栈（stack）操作 先进后出</span><br><span class="line">1.push（） //添加元素到数组的末尾</span><br><span class="line">2.pop（）//删除数组末尾的元素</span><br><span class="line"></span><br><span class="line">3.shift() //删除数组最前面（头部）的元素</span><br><span class="line">4.unshift() //添加元素到数组的头部</span><br><span class="line"></span><br><span class="line">5.indexOf(&apos;&apos;)  //找出某个元素在数组中的索引从0开始</span><br><span class="line">6.splice(pos元素, 1索引) //过索引删除某个元素</span><br><span class="line">7.slice()复制一个数组</span><br><span class="line"></span><br><span class="line">// 3 排序方法</span><br><span class="line">reverse（） //翻转数组</span><br><span class="line">sort（）； //即使是数组sort也是根据字符，从小到大排序</span><br><span class="line">// 4 操作方法</span><br><span class="line">concat（） //把参数拼接到当前数组</span><br><span class="line">// 5 位置方法</span><br><span class="line">indexOf()、lastIndexOf()   //如果没找到返回-1</span><br><span class="line">// 6 迭代方法 不会修改原数组(可选)</span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line">// 7 方法将数组的所有元素连接到一个字符串中。</span><br><span class="line">join()</span><br></pre></td></tr></table></figure><p>​    字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">charAt()    //获取指定位置处字符</span><br><span class="line">charCodeAt()  //获取指定位置处字符的ASCII码</span><br><span class="line">concat()   //拼接字符串，等效于+，+更常用</span><br><span class="line">slice()    //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substring() //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substr()   //从start位置开始，截取length个字符</span><br><span class="line">// 3 位置方法</span><br><span class="line">indexOf()   //返回指定内容在元字符串中的位置</span><br><span class="line">lastIndexOf() //从后往前找，只找第一个匹配的</span><br><span class="line">// 4 去除空白   </span><br><span class="line">trim()  //只能去除字符串前后的空白</span><br><span class="line">// 5 大小写转换方法</span><br><span class="line">to(Locale)UpperCase() //转换大写</span><br><span class="line">to(Locale)LowerCase() //转换小写</span><br></pre></td></tr></table></figure><p> innerHTML和innerText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line">box.innerHTML = &apos;我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;&apos;;</span><br><span class="line">box.innerText = &apos;我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;&apos;;</span><br></pre></td></tr></table></figure><h2 id="8-Dom自定义属性操作-getAttribute-…"><a href="#8-Dom自定义属性操作-getAttribute-…" class="headerlink" title="8.Dom自定义属性操作-getAttribute()…"></a>8.Dom自定义属性操作-getAttribute()…</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><p>## </p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿### 1.移动端.&lt;/p&gt;
&lt;p&gt;$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超小屏幕（手机） 768px  以下&lt;/p&gt;
    
    </summary>
    
    
      <category term="case" scheme="http://yoursite.com/tags/case/"/>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
      <category term="Dom" scheme="http://yoursite.com/tags/Dom/"/>
    
  </entry>
  
  <entry>
    <title>mobile</title>
    <link href="http://yoursite.com/2018/06/04/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%92%E5%88%86/"/>
    <id>http://yoursite.com/2018/06/04/移动端设备的划分/</id>
    <published>2018-06-04T07:31:01.000Z</published>
    <updated>2018-06-12T09:24:09.335Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 1.移动端.</p><p>$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp</p><ul><li><p>超小屏幕（手机） 768px  以下</p><a id="more"></a></li><li><p>小屏 （pad）         768px-992px</p></li><li><p>中屏    （标屏）      992px-1200px</p></li><li><p>大屏（电脑）            1200px以上 </p></li><li><p>@media screen  and（min-width）{}</p><p>​</p><p>2.前端开发资源库 awesomes </p></li></ul><p>3.国内首个开源H5跨屏前端框架 Amaze UI</p><p>4.事件绑定： 主角  addEventListener(‘’,function(){})</p><p>主角,ontouch(function(){})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--文档编码申明--&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;!--要求当前网页使用浏览器最高版本的内核来渲染--&gt;</span><br><span class="line">&lt;!-- more --&gt;   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">   &lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;</span><br><span class="line">   &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link href=&quot;../lib/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/html5shiv/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/respond/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">html5shiv 和  respond 分别用来解决IE8版本浏览器不支持 H5标签和媒体查询的  不兼容问题</span><br></pre></td></tr></table></figure><h3 id="2-栅格布局"><a href="#2-栅格布局" class="headerlink" title="2.栅格布局"></a>2.栅格布局</h3><p>​    1.栅格系统：其实就是行和列的布局，网格状布局</p><p>​    2.容器：container——默认会有15px左右的外边距 .row 填充父容器的15px的左右内间距   margin-left,margin-right -15px拉伸 可回充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--列：col-*-*  *不确定（参数） --&gt;</span><br><span class="line">            col：列样式</span><br><span class="line">            第一个*：屏幕的大小</span><br><span class="line">            大屏设备     lg   大屏设备以上生效包含本身</span><br><span class="line">            中屏设备     md   中屏设备以上生效包含本身</span><br><span class="line">            小屏设备     sm   小屏设备以上生效包含本身</span><br><span class="line">            超小屏设备   xs   超小屏设备以上生效包含本身</span><br><span class="line">            第二个*：每一行的分等份，默认分成12等份 ，数字代表的是占多少份</span><br><span class="line">eg:  &lt;div class=&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    3.显示与隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visible-lg     大屏显示其他隐藏</span><br><span class="line">visible-md</span><br><span class="line">visible-sm</span><br><span class="line">visible-xs</span><br><span class="line">3.2版本以后  建议使用hidden</span><br><span class="line">hidden-lg</span><br><span class="line">hidden-md</span><br><span class="line">hidden-sm</span><br><span class="line">hidden-xs</span><br></pre></td></tr></table></figure><h3 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3.选择器"></a>3.选择器</h3><ul><li>+.-选择器   </li><li>+紧邻的下一个兄弟元素 ~后面所有的兄弟元素</li></ul><h3 id="4-git搭建"><a href="#4-git搭建" class="headerlink" title="4.git搭建"></a>4.git搭建</h3><p>​    1.查看生成密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;       ----用户名</span><br><span class="line">$ git config --global user.email &quot;xxx@xxx.com&quot;  ---邮箱</span><br><span class="line">1.查看是否已经有了ssh密钥：cd ~/.ssh</span><br><span class="line">2.生成密钥 $ ssh-keygen -t rsa -C “xxx@xxx.com”    id_rsa.pub”-公钥</span><br><span class="line"></span><br><span class="line">$ git init 初始化仓库，会在当前目录下创建一个,git隐藏的文件仓库</span><br><span class="line"></span><br><span class="line">$ mkdir css 创建了为css 的文件夹</span><br><span class="line">$ cd CSS 进入CSS文件夹内</span><br><span class="line">$ cd ../ 返回上一级目录</span><br><span class="line">$ touch index.html 创建文本</span><br><span class="line">$ rm 移除文件夹</span><br><span class="line"></span><br><span class="line">$ git add 表示当前文件夹(.)中所有文件加入到管理的缓存中（不是一次性加入到仓库中而是先加入到缓存区）</span><br><span class="line">$ git status   查看状态</span><br><span class="line">$ git commit -m &apos;注释&apos;  提交并增加注释</span><br><span class="line">$</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="5-boorstrap导航"><a href="#5-boorstrap导航" class="headerlink" title="5.boorstrap导航"></a>5.boorstrap导航</h3><h2 id="6-对象创建方式、for-in-循环遍历"><a href="#6-对象创建方式、for-in-循环遍历" class="headerlink" title="6.对象创建方式、for in 循环遍历"></a>6.对象创建方式、for in 循环遍历</h2><p>​     1.对象字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o =&#123;</span><br><span class="line">  name:&apos;s&apos;,</span><br><span class="line">  sex:true,</span><br><span class="line">  say:function()&#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.new Object()创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person=new Object()</span><br><span class="line">person.name =&apos;s&apos;;</span><br><span class="line">person.age=30;</span><br><span class="line">person.sayHi=function()&#123;console(&apos;dasd&apos;)&#125;</span><br></pre></td></tr></table></figure><p>​    3.工厂函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">  var person = new Object();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = function()&#123;</span><br><span class="line">    console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  return person;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = createPerson(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    4.自定义构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.sayHi = function()&#123;</span><br><span class="line">  console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    遍历对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;&#125;</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">  obj[i]=i*2; </span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">  console.log(key+&apos;==&apos;+obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组、字符串的常用方法"><a href="#7-数组、字符串的常用方法" class="headerlink" title="7.数组、字符串的常用方法"></a>7.数组、字符串的常用方法</h2><p>​    前言：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//1 栈（stack）操作 先进后出</span><br><span class="line">1.push（） //添加元素到数组的末尾</span><br><span class="line">2.pop（）//删除数组末尾的元素</span><br><span class="line"></span><br><span class="line">3.shift() //删除数组最前面（头部）的元素</span><br><span class="line">4.unshift() //添加元素到数组的头部</span><br><span class="line"></span><br><span class="line">5.indexOf(&apos;&apos;)  //找出某个元素在数组中的索引从0开始</span><br><span class="line">6.splice(pos元素, 1索引) //过索引删除某个元素</span><br><span class="line">7.slice()复制一个数组</span><br><span class="line"></span><br><span class="line">// 3 排序方法</span><br><span class="line">reverse（） //翻转数组</span><br><span class="line">sort（）； //即使是数组sort也是根据字符，从小到大排序</span><br><span class="line">// 4 操作方法</span><br><span class="line">concat（） //把参数拼接到当前数组</span><br><span class="line">// 5 位置方法</span><br><span class="line">indexOf()、lastIndexOf()   //如果没找到返回-1</span><br><span class="line">// 6 迭代方法 不会修改原数组(可选)</span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line">// 7 方法将数组的所有元素连接到一个字符串中。</span><br><span class="line">join()</span><br></pre></td></tr></table></figure><p>​    字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">charAt()    //获取指定位置处字符</span><br><span class="line">charCodeAt()  //获取指定位置处字符的ASCII码</span><br><span class="line">concat()   //拼接字符串，等效于+，+更常用</span><br><span class="line">slice()    //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substring() //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substr()   //从start位置开始，截取length个字符</span><br><span class="line">// 3 位置方法</span><br><span class="line">indexOf()   //返回指定内容在元字符串中的位置</span><br><span class="line">lastIndexOf() //从后往前找，只找第一个匹配的</span><br><span class="line">// 4 去除空白   </span><br><span class="line">trim()  //只能去除字符串前后的空白</span><br><span class="line">// 5 大小写转换方法</span><br><span class="line">to(Locale)UpperCase() //转换大写</span><br><span class="line">to(Locale)LowerCase() //转换小写</span><br></pre></td></tr></table></figure><p> innerHTML和innerText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line">box.innerHTML = &apos;我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;&apos;;</span><br><span class="line">box.innerText = &apos;我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;&apos;;</span><br></pre></td></tr></table></figure><h2 id="8-Dom自定义属性操作-getAttribute-…"><a href="#8-Dom自定义属性操作-getAttribute-…" class="headerlink" title="8.Dom自定义属性操作-getAttribute()…"></a>8.Dom自定义属性操作-getAttribute()…</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><p>## </p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿### 1.移动端.&lt;/p&gt;
&lt;p&gt;$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超小屏幕（手机） 768px  以下&lt;/p&gt;
    
    </summary>
    
    
      <category term="case" scheme="http://yoursite.com/tags/case/"/>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
      <category term="Dom" scheme="http://yoursite.com/tags/Dom/"/>
    
  </entry>
  
  <entry>
    <title>mobile</title>
    <link href="http://yoursite.com/2018/06/04/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%92%E5%88%86%20-%20%E5%89%AF%E6%9C%AC%20(3)/"/>
    <id>http://yoursite.com/2018/06/04/移动端设备的划分 - 副本 (3)/</id>
    <published>2018-06-04T07:31:01.000Z</published>
    <updated>2018-06-12T09:24:09.335Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 1.移动端.</p><p>$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp</p><ul><li><p>超小屏幕（手机） 768px  以下</p><a id="more"></a></li><li><p>小屏 （pad）         768px-992px</p></li><li><p>中屏    （标屏）      992px-1200px</p></li><li><p>大屏（电脑）            1200px以上 </p></li><li><p>@media screen  and（min-width）{}</p><p>​</p><p>2.前端开发资源库 awesomes </p></li></ul><p>3.国内首个开源H5跨屏前端框架 Amaze UI</p><p>4.事件绑定： 主角  addEventListener(‘’,function(){})</p><p>主角,ontouch(function(){})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--文档编码申明--&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;!--要求当前网页使用浏览器最高版本的内核来渲染--&gt;</span><br><span class="line">&lt;!-- more --&gt;   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">   &lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;</span><br><span class="line">   &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link href=&quot;../lib/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/html5shiv/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/respond/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">html5shiv 和  respond 分别用来解决IE8版本浏览器不支持 H5标签和媒体查询的  不兼容问题</span><br></pre></td></tr></table></figure><h3 id="2-栅格布局"><a href="#2-栅格布局" class="headerlink" title="2.栅格布局"></a>2.栅格布局</h3><p>​    1.栅格系统：其实就是行和列的布局，网格状布局</p><p>​    2.容器：container——默认会有15px左右的外边距 .row 填充父容器的15px的左右内间距   margin-left,margin-right -15px拉伸 可回充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--列：col-*-*  *不确定（参数） --&gt;</span><br><span class="line">            col：列样式</span><br><span class="line">            第一个*：屏幕的大小</span><br><span class="line">            大屏设备     lg   大屏设备以上生效包含本身</span><br><span class="line">            中屏设备     md   中屏设备以上生效包含本身</span><br><span class="line">            小屏设备     sm   小屏设备以上生效包含本身</span><br><span class="line">            超小屏设备   xs   超小屏设备以上生效包含本身</span><br><span class="line">            第二个*：每一行的分等份，默认分成12等份 ，数字代表的是占多少份</span><br><span class="line">eg:  &lt;div class=&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    3.显示与隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visible-lg     大屏显示其他隐藏</span><br><span class="line">visible-md</span><br><span class="line">visible-sm</span><br><span class="line">visible-xs</span><br><span class="line">3.2版本以后  建议使用hidden</span><br><span class="line">hidden-lg</span><br><span class="line">hidden-md</span><br><span class="line">hidden-sm</span><br><span class="line">hidden-xs</span><br></pre></td></tr></table></figure><h3 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3.选择器"></a>3.选择器</h3><ul><li>+.-选择器   </li><li>+紧邻的下一个兄弟元素 ~后面所有的兄弟元素</li></ul><h3 id="4-git搭建"><a href="#4-git搭建" class="headerlink" title="4.git搭建"></a>4.git搭建</h3><p>​    1.查看生成密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;       ----用户名</span><br><span class="line">$ git config --global user.email &quot;xxx@xxx.com&quot;  ---邮箱</span><br><span class="line">1.查看是否已经有了ssh密钥：cd ~/.ssh</span><br><span class="line">2.生成密钥 $ ssh-keygen -t rsa -C “xxx@xxx.com”    id_rsa.pub”-公钥</span><br><span class="line"></span><br><span class="line">$ git init 初始化仓库，会在当前目录下创建一个,git隐藏的文件仓库</span><br><span class="line"></span><br><span class="line">$ mkdir css 创建了为css 的文件夹</span><br><span class="line">$ cd CSS 进入CSS文件夹内</span><br><span class="line">$ cd ../ 返回上一级目录</span><br><span class="line">$ touch index.html 创建文本</span><br><span class="line">$ rm 移除文件夹</span><br><span class="line"></span><br><span class="line">$ git add 表示当前文件夹(.)中所有文件加入到管理的缓存中（不是一次性加入到仓库中而是先加入到缓存区）</span><br><span class="line">$ git status   查看状态</span><br><span class="line">$ git commit -m &apos;注释&apos;  提交并增加注释</span><br><span class="line">$</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="5-boorstrap导航"><a href="#5-boorstrap导航" class="headerlink" title="5.boorstrap导航"></a>5.boorstrap导航</h3><h2 id="6-对象创建方式、for-in-循环遍历"><a href="#6-对象创建方式、for-in-循环遍历" class="headerlink" title="6.对象创建方式、for in 循环遍历"></a>6.对象创建方式、for in 循环遍历</h2><p>​     1.对象字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o =&#123;</span><br><span class="line">  name:&apos;s&apos;,</span><br><span class="line">  sex:true,</span><br><span class="line">  say:function()&#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.new Object()创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person=new Object()</span><br><span class="line">person.name =&apos;s&apos;;</span><br><span class="line">person.age=30;</span><br><span class="line">person.sayHi=function()&#123;console(&apos;dasd&apos;)&#125;</span><br></pre></td></tr></table></figure><p>​    3.工厂函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">  var person = new Object();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = function()&#123;</span><br><span class="line">    console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  return person;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = createPerson(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    4.自定义构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.sayHi = function()&#123;</span><br><span class="line">  console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    遍历对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;&#125;</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">  obj[i]=i*2; </span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">  console.log(key+&apos;==&apos;+obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组、字符串的常用方法"><a href="#7-数组、字符串的常用方法" class="headerlink" title="7.数组、字符串的常用方法"></a>7.数组、字符串的常用方法</h2><p>​    前言：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//1 栈（stack）操作 先进后出</span><br><span class="line">1.push（） //添加元素到数组的末尾</span><br><span class="line">2.pop（）//删除数组末尾的元素</span><br><span class="line"></span><br><span class="line">3.shift() //删除数组最前面（头部）的元素</span><br><span class="line">4.unshift() //添加元素到数组的头部</span><br><span class="line"></span><br><span class="line">5.indexOf(&apos;&apos;)  //找出某个元素在数组中的索引从0开始</span><br><span class="line">6.splice(pos元素, 1索引) //过索引删除某个元素</span><br><span class="line">7.slice()复制一个数组</span><br><span class="line"></span><br><span class="line">// 3 排序方法</span><br><span class="line">reverse（） //翻转数组</span><br><span class="line">sort（）； //即使是数组sort也是根据字符，从小到大排序</span><br><span class="line">// 4 操作方法</span><br><span class="line">concat（） //把参数拼接到当前数组</span><br><span class="line">// 5 位置方法</span><br><span class="line">indexOf()、lastIndexOf()   //如果没找到返回-1</span><br><span class="line">// 6 迭代方法 不会修改原数组(可选)</span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line">// 7 方法将数组的所有元素连接到一个字符串中。</span><br><span class="line">join()</span><br></pre></td></tr></table></figure><p>​    字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">charAt()    //获取指定位置处字符</span><br><span class="line">charCodeAt()  //获取指定位置处字符的ASCII码</span><br><span class="line">concat()   //拼接字符串，等效于+，+更常用</span><br><span class="line">slice()    //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substring() //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substr()   //从start位置开始，截取length个字符</span><br><span class="line">// 3 位置方法</span><br><span class="line">indexOf()   //返回指定内容在元字符串中的位置</span><br><span class="line">lastIndexOf() //从后往前找，只找第一个匹配的</span><br><span class="line">// 4 去除空白   </span><br><span class="line">trim()  //只能去除字符串前后的空白</span><br><span class="line">// 5 大小写转换方法</span><br><span class="line">to(Locale)UpperCase() //转换大写</span><br><span class="line">to(Locale)LowerCase() //转换小写</span><br></pre></td></tr></table></figure><p> innerHTML和innerText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line">box.innerHTML = &apos;我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;&apos;;</span><br><span class="line">box.innerText = &apos;我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;&apos;;</span><br></pre></td></tr></table></figure><h2 id="8-Dom自定义属性操作-getAttribute-…"><a href="#8-Dom自定义属性操作-getAttribute-…" class="headerlink" title="8.Dom自定义属性操作-getAttribute()…"></a>8.Dom自定义属性操作-getAttribute()…</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><p>## </p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿### 1.移动端.&lt;/p&gt;
&lt;p&gt;$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超小屏幕（手机） 768px  以下&lt;/p&gt;
    
    </summary>
    
    
      <category term="case" scheme="http://yoursite.com/tags/case/"/>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
      <category term="Dom" scheme="http://yoursite.com/tags/Dom/"/>
    
  </entry>
  
</feed>
