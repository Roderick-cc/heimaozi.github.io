<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dobin</title>
  <icon>https://www.gravatar.com/avatar/e68e0574df1b17f4ade7922f9f8b4ac3</icon>
  <subtitle>Torch down,the flame is still upward.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-26T06:58:24.303Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dobin</name>
    <email>1002133015@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP请求与服务器响应流程</title>
    <link href="http://yoursite.com/2018/06/26/2.http/"/>
    <id>http://yoursite.com/2018/06/26/2.http/</id>
    <published>2018-06-25T16:00:00.000Z</published>
    <updated>2018-06-26T06:58:24.303Z</updated>
    
    <content type="html"><![CDATA[<p>​    　<strong>1. HTTP 简介</strong></p><p>　　　　1.1定义</p><p>　　　　1.2 请求/响应报文格式</p><p>　　　　1.3请求方式–GET/POST     状态码</p><p>　　　　1.4 响应状态</p><p>　　<strong>2. HTTP请求，浏览器做了什么, 服务端处理解析过程</strong></p> <a id="more"></a><h2 id="1：HTTP简介"><a href="#1：HTTP简介" class="headerlink" title="1：HTTP简介"></a><strong>1：HTTP简介</strong></h2><p><strong>　　1.1</strong></p><p>　　HTTP（HyperText Transfer Protocol，超文本传输协议）最早就是计算机与计算机之间沟通的一种标准协议，这 种协议限制了通讯内容的格式以及各项内容的含义。</p><p>　　随着时代的发展，技术的变迁，这种协议现在广泛的应用在各种领域，也不仅仅局限于计算机与计算机之间，手 机、电视等各种智能设备很多时候都在使用这种协议通讯，所以一般现在称 HTTP 为端与端之间的通讯协议。</p><p><img src="https://images2018.cnblogs.com/blog/1329093/201806/1329093-20180626134034868-391056346.png" alt="img"></p><p>　　Web 属于 B/S 架构的应用软件，在 B/S 架构中，浏览器与服务器沟通的协议就是 HTTP 协议，作为一个合格的 Web 开发者，了解 HTTP 协议中约定的内容是一门必修课。</p><p>　　应用软件架构一般分为两类： B/S 架构：Browser（浏览器） ←→ Server（服务器），这种软件都是通过浏览器访问一个网站使用， 服务器提供数据存储等服务。 C/S 架构：Client（客户端） ←→ Server（服务器），这种软件通过安装一个软件到电脑，然后使用， 服务器提供数据存储等服务。</p><p><strong>　　1.2请求报文的格式</strong></p><p><strong>　　</strong>请求行    —》请求方式 请求路径 HTTP协议版本  （一般GET请求主观上都是去‘拿东西’，所以使用需要看情况）</p><p>　　请求头    —》客户端想要告诉服务端的一些额外信息</p><p>　　空行</p><p>　　请求体   —》客户端想要发送给服务端的数据正文</p><p><strong>　　　　<img src="https://images2018.cnblogs.com/blog/1329093/201806/1329093-20180626140429906-620907297.png" alt="img"></strong></p><p>　　</p><p> 　　<strong>1.3请求的方式GET/POST    状态码</strong></p><p>　　根据HTTP标准，HTTP请求可以使用多种请求方法。</p><p>　　HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>　　HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><p>具体的请查看官方文档：</p><p>　　<a href="http://www.runoob.com/http/http-methods.html" target="_blank" rel="noopener">http://www.runoob.com/http/http-methods.html</a></p><p>　　<a href="http://www.w3school.com.cn/tags/html_ref_httpmethods.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/html_ref_httpmethods.asp</a></p><p> <img src="https://images2018.cnblogs.com/blog/1329093/201806/1329093-20180626140754773-869507871.png" alt="img"></p><p>　<strong>　　状态码：了解即可</strong></p><p>　　状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p><p>　　1xx：指示信息 —— 表示请求已接收，继续处理。</p><p>　　2xx：成功 —— 表示请求已被成功接收、理解、接受。</p><p>　　3xx：重定向 —— 要完成请求必须进行更进一步的操作。</p><p>　　4xx：客户端错误 —— 请求有语法错误或请求无法实现。</p><p>　　5xx：服务器端错误 —— 服务器未能实现合法的请求。</p><p>　<strong>　常见状态代码、状态描述的说明如下。</strong></p><p>　　200 OK：客户端请求成功。</p><p>　　400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</p><p>　　401 Unauthorized：请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用。</p><p>　　403 Forbidden：服务器收到请求，但是拒绝提供服务。</p><p>　　404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</p><p>　　 500 Internal Server Error：服务器发生不可预期的错误。 503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</p><h2 id="2-HTTP请求，浏览器做了什么-服务端处理解析过程"><a href="#2-HTTP请求，浏览器做了什么-服务端处理解析过程" class="headerlink" title="2. HTTP请求，浏览器做了什么, 服务端处理解析过程"></a><strong>2. HTTP请求，浏览器做了什么, 服务端处理解析过程</strong></h2><p>　　下面这张图我觉得比任何文字描述都清晰了，我这里就不再做详细介绍了，此图根据不同的操作系统，会有不同的概念，此为：Windows下的Apache+PHP环境。</p><p><img src="https://images2018.cnblogs.com/blog/1329093/201806/1329093-20180626094244912-1096955678.png" alt="img"></p><p>​     结语：以上过程仅是个人理解，或许有错误的地方，也或者有还未理解到的层面，如果看到有错误或者有所指点的还希望不吝赐教指正！抱拳，感谢！O(∩_∩)O哈哈</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    　&lt;strong&gt;1. HTTP 简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.1定义&lt;/p&gt;
&lt;p&gt;　　　　1.2 请求/响应报文格式&lt;/p&gt;
&lt;p&gt;　　　　1.3请求方式–GET/POST     状态码&lt;/p&gt;
&lt;p&gt;　　　　1.4 响应状态&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2. HTTP请求，浏览器做了什么, 服务端处理解析过程&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Http" scheme="http://yoursite.com/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://yoursite.com/2018/06/04/1.%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%92%E5%88%86/"/>
    <id>http://yoursite.com/2018/06/04/1.移动端设备的划分/</id>
    <published>2018-06-04T07:31:01.000Z</published>
    <updated>2018-06-20T03:14:15.543Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 1.移动端.</p><p>$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp</p><ul><li><p>超小屏幕（手机） 768px  以下</p><a id="more"></a></li><li><p>小屏 （pad）         768px-992px</p></li><li><p>中屏    （标屏）      992px-1200px</p></li><li><p>大屏（电脑）            1200px以上 </p></li><li><p>@media screen  and（min-width）{}</p><p>​</p><p>2.前端开发资源库 awesomes </p></li></ul><p>3.国内首个开源H5跨屏前端框架 Amaze UI</p><p>4.事件绑定： 主角  addEventListener(‘’,function(){})</p><p>主角,ontouch(function(){})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--文档编码申明--&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;!--要求当前网页使用浏览器最高版本的内核来渲染--&gt;</span><br><span class="line">&lt;!-- more --&gt;   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">   &lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;</span><br><span class="line">   &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link href=&quot;../lib/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/html5shiv/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../lib/respond/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">html5shiv 和  respond 分别用来解决IE8版本浏览器不支持 H5标签和媒体查询的  不兼容问题</span><br></pre></td></tr></table></figure><h3 id="2-栅格布局"><a href="#2-栅格布局" class="headerlink" title="2.栅格布局"></a>2.栅格布局</h3><p>​    1.栅格系统：其实就是行和列的布局，网格状布局</p><p>​    2.容器：container——默认会有15px左右的外边距 .row 填充父容器的15px的左右内间距   margin-left,margin-right -15px拉伸 可回充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--列：col-*-*  *不确定（参数） --&gt;</span><br><span class="line">            col：列样式</span><br><span class="line">            第一个*：屏幕的大小</span><br><span class="line">            大屏设备     lg   大屏设备以上生效包含本身</span><br><span class="line">            中屏设备     md   中屏设备以上生效包含本身</span><br><span class="line">            小屏设备     sm   小屏设备以上生效包含本身</span><br><span class="line">            超小屏设备   xs   超小屏设备以上生效包含本身</span><br><span class="line">            第二个*：每一行的分等份，默认分成12等份 ，数字代表的是占多少份</span><br><span class="line">eg:  &lt;div class=&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    3.显示与隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visible-lg     大屏显示其他隐藏</span><br><span class="line">visible-md</span><br><span class="line">visible-sm</span><br><span class="line">visible-xs</span><br><span class="line">3.2版本以后  建议使用hidden</span><br><span class="line">hidden-lg</span><br><span class="line">hidden-md</span><br><span class="line">hidden-sm</span><br><span class="line">hidden-xs</span><br></pre></td></tr></table></figure><h3 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3.选择器"></a>3.选择器</h3><ul><li>+.-选择器   </li><li>+紧邻的下一个兄弟元素 ~后面所有的兄弟元素</li></ul><h3 id="4-git搭建"><a href="#4-git搭建" class="headerlink" title="4.git搭建"></a>4.git搭建</h3><p>​    1.查看生成密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;       ----用户名</span><br><span class="line">$ git config --global user.email &quot;xxx@xxx.com&quot;  ---邮箱</span><br><span class="line">1.查看是否已经有了ssh密钥：cd ~/.ssh</span><br><span class="line">2.生成密钥 $ ssh-keygen -t rsa -C “xxx@xxx.com”    id_rsa.pub”-公钥</span><br><span class="line"></span><br><span class="line">$ git init 初始化仓库，会在当前目录下创建一个,git隐藏的文件仓库</span><br><span class="line"></span><br><span class="line">$ mkdir css 创建了为css 的文件夹</span><br><span class="line">$ cd CSS 进入CSS文件夹内</span><br><span class="line">$ cd ../ 返回上一级目录</span><br><span class="line">$ touch index.html 创建文本</span><br><span class="line">$ rm 移除文件夹</span><br><span class="line"></span><br><span class="line">$ git add 表示当前文件夹(.)中所有文件加入到管理的缓存中（不是一次性加入到仓库中而是先加入到缓存区）</span><br><span class="line">$ git status   查看状态</span><br><span class="line">$ git commit -m &apos;注释&apos;  提交并增加注释</span><br><span class="line">$</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="5-boorstrap导航"><a href="#5-boorstrap导航" class="headerlink" title="5.boorstrap导航"></a>5.boorstrap导航</h3><h2 id="6-对象创建方式、for-in-循环遍历"><a href="#6-对象创建方式、for-in-循环遍历" class="headerlink" title="6.对象创建方式、for in 循环遍历"></a>6.对象创建方式、for in 循环遍历</h2><p>​     1.对象字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o =&#123;</span><br><span class="line">  name:&apos;s&apos;,</span><br><span class="line">  sex:true,</span><br><span class="line">  say:function()&#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.new Object()创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person=new Object()</span><br><span class="line">person.name =&apos;s&apos;;</span><br><span class="line">person.age=30;</span><br><span class="line">person.sayHi=function()&#123;console(&apos;dasd&apos;)&#125;</span><br></pre></td></tr></table></figure><p>​    3.工厂函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">  var person = new Object();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = function()&#123;</span><br><span class="line">    console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  return person;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = createPerson(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    4.自定义构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.sayHi = function()&#123;</span><br><span class="line">  console.log(&apos;Hello,everyBody&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&apos;张三&apos;, 22, &apos;actor&apos;);</span><br></pre></td></tr></table></figure><p>​    遍历对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;&#125;</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">  obj[i]=i*2; </span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">  console.log(key+&apos;==&apos;+obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组、字符串的常用方法"><a href="#7-数组、字符串的常用方法" class="headerlink" title="7.数组、字符串的常用方法"></a>7.数组、字符串的常用方法</h2><p>​    前言：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//1 栈（stack）操作 先进后出</span><br><span class="line">1.push（） //添加元素到数组的末尾</span><br><span class="line">2.pop（）//删除数组末尾的元素</span><br><span class="line"></span><br><span class="line">3.shift() //删除数组最前面（头部）的元素</span><br><span class="line">4.unshift() //添加元素到数组的头部</span><br><span class="line"></span><br><span class="line">5.indexOf(&apos;&apos;)  //找出某个元素在数组中的索引从0开始</span><br><span class="line">6.splice(pos元素, 1索引) //过索引删除某个元素</span><br><span class="line">7.slice()复制一个数组</span><br><span class="line"></span><br><span class="line">// 3 排序方法</span><br><span class="line">reverse（） //翻转数组</span><br><span class="line">sort（）； //即使是数组sort也是根据字符，从小到大排序</span><br><span class="line">// 4 操作方法</span><br><span class="line">concat（） //把参数拼接到当前数组</span><br><span class="line">// 5 位置方法</span><br><span class="line">indexOf()、lastIndexOf()   //如果没找到返回-1</span><br><span class="line">// 6 迭代方法 不会修改原数组(可选)</span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line">// 7 方法将数组的所有元素连接到一个字符串中。</span><br><span class="line">join()</span><br></pre></td></tr></table></figure><p>​    字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">charAt()    //获取指定位置处字符</span><br><span class="line">charCodeAt()  //获取指定位置处字符的ASCII码</span><br><span class="line">concat()   //拼接字符串，等效于+，+更常用</span><br><span class="line">slice()    //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substring() //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substr()   //从start位置开始，截取length个字符</span><br><span class="line">// 3 位置方法</span><br><span class="line">indexOf()   //返回指定内容在元字符串中的位置</span><br><span class="line">lastIndexOf() //从后往前找，只找第一个匹配的</span><br><span class="line">// 4 去除空白   </span><br><span class="line">trim()  //只能去除字符串前后的空白</span><br><span class="line">// 5 大小写转换方法</span><br><span class="line">to(Locale)UpperCase() //转换大写</span><br><span class="line">to(Locale)LowerCase() //转换小写</span><br></pre></td></tr></table></figure><p> innerHTML和innerText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line">box.innerHTML = &apos;我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;&apos;;</span><br><span class="line">box.innerText = &apos;我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;&apos;;</span><br></pre></td></tr></table></figure><h2 id="8-Dom自定义属性操作-getAttribute-…"><a href="#8-Dom自定义属性操作-getAttribute-…" class="headerlink" title="8.Dom自定义属性操作-getAttribute()…"></a>8.Dom自定义属性操作-getAttribute()…</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><p>## </p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿### 1.移动端.&lt;/p&gt;
&lt;p&gt;$1$.通过查询screen的宽度来指定某个宽度区间的网页布局    meat:vp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超小屏幕（手机） 768px  以下&lt;/p&gt;
    
    </summary>
    
    
      <category term="case" scheme="http://yoursite.com/tags/case/"/>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
      <category term="Dom" scheme="http://yoursite.com/tags/Dom/"/>
    
  </entry>
  
</feed>
